{"version":3,"sources":["logo.svg","StateData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StateData","state","confirmed","active","recovered","deaths","lastupdatedtime","deltaconfirmed","deltarecovered","deltadeaths","Card","className","CardContent","color","Divider","variant","component","App","States","statesData","statecode","undefined","stateName","setStatesData","stateCode","setState","stateData","filter","st","toUpperCase","ex","console","log","message","getStatesList","e","a","preventDefault","fetch","apiCall","json","statewise","map","showStatesData","target","value","tempStateData","code","length","name","showTotal","window","addEventListener","this","stateList","MenuItem","sort","st1","st2","props","children","stateDataCard","src","logo","alt","FormControl","InputLabel","id","Select","labelId","onChange","label","Button","onClick","role","aria-labelledby","href","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,kC,0RCyH5BC,G,MAnHG,SAAC,GAUR,IATPC,EASM,EATNA,MACAC,EAQM,EARNA,UACAC,EAOM,EAPNA,OACAC,EAMM,EANNA,UACAC,EAKM,EALNA,OACAC,EAIM,EAJNA,gBACAC,EAGM,EAHNA,eACAC,EAEM,EAFNA,eACAC,EACM,EADNA,YAEA,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,QACd,kBAACC,EAAA,EAAD,KACE,uBAAGC,MAAM,UAAUF,UAAU,SAC1BV,GAEH,kBAACa,EAAA,EAAD,CAASC,QAAQ,WACjB,yCACa,0BAAMJ,UAAU,aACtBT,EADM,IACK,yBAAKS,UAAU,kBAAf,KAAmCJ,EAAnC,OAGlB,sCACU,0BAAMI,UAAU,UACnBR,IAGP,yCACa,0BAAMQ,UAAU,aACtBP,EADM,IACK,yBAAKO,UAAU,kBAAf,KAAmCH,EAAnC,OAGlB,sCACU,0BAAMG,UAAU,UACnBN,EADG,IACK,yBAAKM,UAAU,eAAf,KAAgCF,EAAhC,OAGf,+CACmB,0BAAMM,QAAQ,QAAQC,UAAU,IAAIL,UAAU,eAC1DL,Q,qDCuIFW,E,4MA1KbhB,MAAQ,CACNiB,OAAQ,GACRC,WAAY,GACZC,eAAWC,EACXC,eAAWD,EACXnB,eAAWmB,EACXlB,YAAQkB,EACRjB,eAAWiB,EACXhB,YAAQgB,EACRf,qBAAiBe,EACjBd,oBAAgBc,EAChBb,oBAAgBa,EAChBZ,iBAAaY,G,EAQfE,cAAgB,SAACC,EAAWF,GAC1B,GAAGE,GAAaF,EAAW,CACzB,EAAKG,SAAS,CACZL,UAAWI,EACXF,UAAWA,IAEb,IACE,IAAII,EAAY,EAAKzB,MAAMkB,WAAWQ,QAAO,SAACC,GAC5C,OAAQA,EAAGR,YAAcI,EAAUK,iBAErC,EAAKJ,SAAS,CACZvB,UAAWwB,EAAU,GAAGxB,UACxBC,OAAQuB,EAAU,GAAGvB,OACrBC,UAAWsB,EAAU,GAAGtB,UACxBC,OAAQqB,EAAU,GAAGrB,OACrBC,gBAAiBoB,EAAU,GAAGpB,gBAC9BC,eAAgBmB,EAAU,GAAGnB,eAC7BC,eAAgBkB,EAAU,GAAGlB,eAC7BC,YAAaiB,EAAU,GAAGjB,cAE5B,MAAOqB,GACPC,QAAQC,IAAIF,EAAGG,eAIjB,EAAKR,SAAS,CACZL,eAAWC,EACXC,eAAWD,EACXnB,eAAWmB,EACXlB,YAAQkB,EACRjB,eAAWiB,EACXhB,YAAQgB,EACRf,qBAAiBe,EACjBd,oBAAgBc,EAChBb,oBAAgBa,EAChBZ,iBAAaY,K,EAKnBa,c,uCAAgB,WAAMC,GAAN,mBAAAC,EAAA,6DACdD,EAAEE,iBADY,kBAGUC,MAAM,8EAHhB,cAGNC,EAHM,gBAMcA,EAAQC,OANtB,gBAMLC,EANK,EAMLA,UACP,EAAKhB,SAAS,CACZN,WAAYsB,IAEd,EAAKhB,SAAS,CACZP,OAASuB,EAAUC,KAAI,SAACd,GACtB,MAAQ,CAAC,KAAOA,EAAGR,UAAW,KAAOQ,EAAG3B,YAZhC,kDAgBZ8B,QAAQC,IAAI,KAAGC,SAhBH,0D,wDAoBhBU,e,uCAAiB,WAAMR,GAAN,mBAAAC,EAAA,2DACCf,EAEdG,EAAYW,EAAES,OAAOC,MAGvBV,EAAEE,kBAGES,OAA8BzB,IAAdG,GAA2B,EAAKvB,MAAMiB,OAAOS,QAAO,SAACC,GACvE,OAAQA,EAAGmB,OAASvB,MAEJwB,OAAS,IACzB1B,EAAYwB,EAAc,GAAGG,MAG5BzB,GAAaF,EACd,EAAKC,cAAcC,EAAWF,GAE9B,EAAKC,cAAc,KAAM,MAnBZ,2C,wDAsBjB2B,U,uCAAY,WAAMf,GAAN,SAAAC,EAAA,sDACV,EAAKb,cAAc,KAAM,SADf,2C,wHAtFV4B,OAAOC,iBAAiB,OAAQC,KAAKnB,eACrCiB,OAAOC,iBAAiB,OAAQC,KAAKV,kB,+BA2FrC,IAAIW,EAAYD,KAAKpD,MAAMiB,OAAO8B,OAAS,GACxCK,KAAKpD,MAAMiB,OAAOwB,KAAI,SAACzC,GACxB,OACE,kBAACsD,EAAA,EAAD,CAAUV,WAAsBxB,IAAfpB,EAAM8C,KAAqB9C,EAAM8C,KAAO,IACtD9C,EAAMgD,SAIZO,MAAK,SAACC,EAAKC,GACV,OAASD,EAAIE,MAAMC,SAAS/B,cAAgB6B,EAAIC,MAAMC,SAAS/B,eAAkB,EAAI,KAOnFgC,OAA0CxC,IAAzBgC,KAAKpD,MAAMC,UAE5B,kBAAC,EAAD,CACED,MAASoD,KAAKpD,MAAMqB,UACpBpB,UAAamD,KAAKpD,MAAMC,UACxBC,OAAUkD,KAAKpD,MAAME,OACrBC,UAAaiD,KAAKpD,MAAMG,UACxBC,OAAUgD,KAAKpD,MAAMI,OACrBC,gBAAmB+C,KAAKpD,MAAMK,gBAC9BC,eAAkB8C,KAAKpD,MAAMM,eAC7BC,eAAkB6C,KAAKpD,MAAMO,eAC7BC,YAAe4C,KAAKpD,MAAMQ,mBAE1BY,EAEN,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKmD,IAAKC,IAAMpD,UAAU,WAAWqD,IAAI,SACzC,sDACA,kBAACC,EAAA,EAAD,CAAalD,QAAQ,WAAWJ,UAAU,eACxC,kBAACuD,EAAA,EAAD,CAAYC,GAAG,oBAAf,gBACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,mBACRF,GAAG,qBACHtB,WAAgCxB,IAAzBgC,KAAKpD,MAAMmB,UAA0BiC,KAAKpD,MAAMmB,UAAY,GACnEkD,SAAUjB,KAAKV,eACfiB,SAAUN,EACViB,MAAM,kBAEV,6BACA,kBAACC,EAAA,EAAD,CAAQzD,QAAQ,YAAYF,MAAM,UAAU4D,QAASpB,KAAKH,WAA1D,yBAIDW,EAED,yBAAKlD,UAAU,UACb,2BAAG,0BAAM+D,KAAK,MAAMC,kBAAgB,6BAAjC,kCAAH,OAAgF,uBAAGC,KAAK,6BAAR,aAChF,sCAAW,uBAAGA,KAAK,iCAAR,4B,GApKHC,aCEEC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAM7D,c","file":"static/js/main.e58043f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport './StateData.css';\r\n\r\nconst StateData = ({\r\n    state,\r\n    confirmed,\r\n    active,\r\n    recovered,\r\n    deaths,\r\n    lastupdatedtime,\r\n    deltaconfirmed,\r\n    deltarecovered,\r\n    deltadeaths\r\n    }) => {  \r\n    return (\r\n      <Card className=\"root\">        \r\n        <CardContent>\r\n          <p color=\"primary\" className=\"title\">\r\n            {state}\r\n          </p>\r\n          <Divider variant=\"middle\"/>\r\n          <p>\r\n            Confirmed: <span className=\"confirmed\">\r\n                {confirmed} <sup className=\"deltaconfirmed\">[+{deltaconfirmed}]</sup>\r\n            </span>\r\n          </p>\r\n          <p>\r\n            Active: <span className=\"active\">\r\n                {active}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            Recovered: <span className=\"recovered\">\r\n                {recovered} <sup className=\"deltarecovered\">[+{deltarecovered}]</sup>\r\n            </span>\r\n          </p>\r\n          <p>\r\n            Deaths: <span className=\"deaths\">\r\n                {deaths} <sup className=\"deltadeaths\">[+{deltadeaths}]</sup>\r\n            </span>\r\n          </p>\r\n          <p>\r\n            Last updated at: <span variant=\"body2\" component=\"p\" className=\"lastUpdated\">\r\n                {lastupdatedtime}\r\n            </span>\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n    ); \r\n\r\n    /* return (\r\n        <div className=\"state__data\">\r\n            {state && (\r\n                <div className=\"state_data\">\r\n                    <p className=\"state__\">\r\n                        State: \r\n                    </p>\r\n                    <p className=\"state__value\">\r\n                        {state}\r\n                    </p>\r\n                </div>\r\n            )}\r\n\r\n            {confirmed && (\r\n                <div className=\"state_data\">\r\n                    <p className=\" state__ state__confirmed\">\r\n                        Confirmed Cases: \r\n                    </p>\r\n                    <p className=\"state__value state__confirmed__value\">\r\n                        {confirmed} [+{deltaconfirmed}]\r\n                    </p>\r\n                </div>\r\n            )}\r\n\r\n            {active && (\r\n                <div className=\"state_data\">\r\n                    <p className=\"state__ state__active\">\r\n                        Active Cases: \r\n                    </p>\r\n                    <p className=\"state__value state__active__value\">\r\n                        {active}\r\n                    </p>\r\n                </div>\r\n            )}\r\n            \r\n            {recovered && (\r\n                <div className=\"state_data\">\r\n                    <p className=\"state__ state__recovered\">\r\n                        Recovered: \r\n                    </p>\r\n                    <p className=\"state__value state__recovered__value\">\r\n                        {recovered} [+{deltarecovered}]\r\n                    </p>\r\n                </div>\r\n            )}\r\n            \r\n            {deaths && (\r\n                <div className=\"state_data\">\r\n                    <p className=\"state__ state__deaths\">\r\n                        Deaths: \r\n                    </p>\r\n                    <p className=\"state__value state__deaths__value\">\r\n                        {deaths} [+{deltadeaths}]\r\n                    </p>\r\n                </div>\r\n            )}\r\n\r\n            {lastupdatedtime && (\r\n                <div className=\"state_data\">\r\n                    <p className=\"state__ state__lastupdatedtime\">\r\n                        Last updated at: <Fragment>{lastupdatedtime}</Fragment>\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );  */\r\n};\r\n\r\nexport default StateData;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport StateData from './StateData';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport './App.css';\r\nimport { Button } from '@material-ui/core';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    States: [],\r\n    statesData: [],\r\n    statecode: undefined,\r\n    stateName: undefined,\r\n    confirmed: undefined,\r\n    active: undefined,\r\n    recovered: undefined,\r\n    deaths: undefined,\r\n    lastupdatedtime: undefined,\r\n    deltaconfirmed: undefined,\r\n    deltarecovered: undefined,\r\n    deltadeaths: undefined\r\n  }\r\n\r\n  componentDidMount(){\r\n    window.addEventListener(\"load\", this.getStatesList);    \r\n    window.addEventListener(\"load\", this.showStatesData);\r\n  }\r\n\r\n  setStatesData = (stateCode, stateName) => {\r\n    if(stateCode && stateName) {      \r\n      this.setState({\r\n        statecode: stateCode,\r\n        stateName: stateName\r\n      });\r\n      try{\r\n        let stateData = this.state.statesData.filter((st) => { \r\n          return (st.statecode === stateCode.toUpperCase());\r\n        });\r\n        this.setState({\r\n          confirmed: stateData[0].confirmed,\r\n          active: stateData[0].active,\r\n          recovered: stateData[0].recovered,\r\n          deaths: stateData[0].deaths,\r\n          lastupdatedtime: stateData[0].lastupdatedtime,\r\n          deltaconfirmed: stateData[0].deltaconfirmed,\r\n          deltarecovered: stateData[0].deltarecovered,\r\n          deltadeaths: stateData[0].deltadeaths\r\n        });        \r\n      } catch (ex) {\r\n        console.log(ex.message);\r\n      }\r\n    }\r\n    else{\r\n      this.setState({\r\n        statecode: undefined,\r\n        stateName: undefined,\r\n        confirmed: undefined,\r\n        active: undefined,\r\n        recovered: undefined,\r\n        deaths: undefined,\r\n        lastupdatedtime: undefined,\r\n        deltaconfirmed: undefined,\r\n        deltarecovered: undefined,\r\n        deltadeaths: undefined\r\n      });\r\n    }\r\n  }\r\n\r\n  getStatesList = async e => {\r\n    e.preventDefault();\r\n    try{\r\n      const apiCall = await fetch(\r\n        `https://cors-anywhere.herokuapp.com/https://api.covid19india.org/data.json`\r\n      );\r\n      const {statewise} = await apiCall.json();      \r\n      this.setState({\r\n        statesData: statewise\r\n      });       \r\n      this.setState({\r\n        States : statewise.map((st) => {\r\n          return ({\"code\":st.statecode, \"name\":st.state});\r\n        })\r\n      });\r\n    } catch (ex) {\r\n      console.log(ex.message);\r\n    }\r\n  };\r\n\r\n  showStatesData = async e => {      \r\n    let stateCode = undefined;\r\n    //if(e.detail === 0) {\r\n      stateCode = e.target.value;\r\n    //}\r\n\r\n    e.preventDefault();\r\n\r\n    let stateName;\r\n    let tempStateData = stateCode !== undefined && this.state.States.filter((st) => {\r\n      return (st.code === stateCode);\r\n    });\r\n    if (tempStateData.length > 0) {\r\n      stateName = tempStateData[0].name;\r\n    }\r\n    \r\n    if(stateCode && stateName)\r\n      this.setStatesData(stateCode, stateName); \r\n    else\r\n      this.setStatesData(null, null);\r\n  };  \r\n\r\n  showTotal = async e => {\r\n    this.setStatesData(\"TT\", \"Total\");\r\n  }\r\n\r\n  render() {\r\n    // states list sorted in alphabetical order\r\n    let stateList = this.state.States.length > 0 \r\n    && this.state.States.map((state) => {\r\n      return (\r\n        <MenuItem value={state.code !== undefined ? state.code : ''}>\r\n          {state.name}\r\n        </MenuItem>   \r\n      )  \r\n    })\r\n    .sort((st1, st2) => {\r\n      return ((st1.props.children.toUpperCase() < st2.props.children.toUpperCase()) ? -1 : 1);\r\n    });\r\n    /* const emptyMenuItem = () => {\r\n      return (<MenuItem value=\"\"><em>None</em></MenuItem>);\r\n    }\r\n    stateList.unshift(emptyMenuItem); */\r\n\r\n    let stateDataCard = (this.state.confirmed !== undefined) ? \r\n      (\r\n        <StateData \r\n          state = {this.state.stateName}\r\n          confirmed = {this.state.confirmed}\r\n          active = {this.state.active}\r\n          recovered = {this.state.recovered}\r\n          deaths = {this.state.deaths}\r\n          lastupdatedtime = {this.state.lastupdatedtime}\r\n          deltaconfirmed = {this.state.deltaconfirmed}\r\n          deltarecovered = {this.state.deltarecovered}\r\n          deltadeaths = {this.state.deltadeaths}\r\n        />\r\n      ) : undefined;    \r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h3>COVID-19 India Tracker</h3> \r\n          <FormControl variant=\"outlined\" className=\"formControl\">\r\n            <InputLabel id=\"selectStateLabel\">Select state</InputLabel>\r\n            <Select\r\n              labelId=\"selectStateLabel\"\r\n              id=\"selectStateElement\"\r\n              value={this.state.statecode !== undefined ? this.state.statecode : ''} \r\n              onChange={this.showStatesData} \r\n              children={stateList} \r\n              label=\"Select state\" />\r\n          </FormControl>\r\n          <br/>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.showTotal}>\r\n            Show Pan-India Cases\r\n          </Button>\r\n        </header>\r\n        {stateDataCard}  \r\n          \r\n        <div className=\"footer\">\r\n          <p><span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">👨‍💻</span> by <a href=\"https://www.devkrishna.co\">Shimanta</a></p>\r\n          <p>Source: <a href=\"https://api.covid19india.org/\">COVID19-India API</a></p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}